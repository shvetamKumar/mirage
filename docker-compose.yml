
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - HOST=0.0.0.0
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=mirage_dev
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mirage-network
    restart: unless-stopped
    volumes:
      - app-logs:/app/logs

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=mirage_dev
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - mirage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: Redis for caching (if you want to add caching later)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - mirage-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Optional: Adminer for database management
  adminer:
    image: adminer:4.8.1
    ports:
      - "8080:8080"
    networks:
      - mirage-network
    restart: unless-stopped
    environment:
      - ADMINER_DEFAULT_SERVER=postgres

networks:
  mirage-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  app-logs: